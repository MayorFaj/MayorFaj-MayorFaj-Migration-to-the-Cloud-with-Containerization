pipeline{
    agent any

    environment {
        TAG = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}"
        max = 20
        random_num = "${Math.abs(new Random().nextInt(max+1))}"
        PASSWORD = credentials('DOCKERHUB_PASSWORD')
        imageName = "mayorfaj/php-todo1-app:${TAG}"
        containerName = "my-todo-app-${random_num}"
    }

    stages{
        stage("Workspace initial Cleanup") {
            steps {
                dir("${WORKSPACE}") {
                    deleteDir()
                }
            }
        }
    
        stage('Checkout Git') {
            steps {
                git branch: 'feature', credentialsId: 'my-github-id', url: 'https://github.com/MayorFaj/Migration-to-the-Cloud-with-Containerization.git'
            }
        }

        stage('Building application ') {
            steps {
                dir('/php-todo') {
                script {
                    sh "echo \$PASSWORD"
                    sh " docker login -u mayorfaj -p ${env.PASSWORD}"
                    sh " docker build -t ${imageName} ."
                }
            }
            }
        }

        stage('Creating docker container') {
            steps {
                script {
                    sh " docker run -d --name ${containerName} -p 8000:8000 ${imageName}"
                }
            }
        }

        stage("Smoke Test") {
            steps {
                script {
                    def response = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://35.157.144.183:8080/', returnStdout: true).trim()
                    echo "HTTP Status Code: ${response}"
                    if (response != '200') {
                        error "Test failed! HTTP Status Code is not 200."
                    }
                }
            }
        }

        stage("Publish to Registry") {
            steps {
                script {
                    sh " docker push ${imageName}"
                }
            }
        }

        stage ('Clean Up') {
            steps {
                script {
                    sh " docker stop ${containerName}"
                    sh " docker rm ${containerName}"
                    sh " docker rmi ${imageName}"
                }
            }
        }

        stage ('logout Docker') {
            steps {
                script {
                    sh " docker logout"
                }
            }
        }
    }
}
   